//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.InterbotixMoveitInterface
{
    [Serializable]
    public class MoveItPlanRequest : Message
    {
        public const string k_RosMessageName = "interbotix_moveit_interface/MoveItPlan";
        public override string RosMessageName => k_RosMessageName;

        //  Send commands to the moveit_plan server
        // 
        //  Enum values that define the commands available for the server. Note that all
        //  ee_poses (defined in the 'ee_arm_link' frame) are relative to the 'world' frame.
        //  There are 4 options:
        //    1) CMD_PLAN_POSE - Desired ee_pose which is made up of a position and orientation element
        //    2) CMD_PLAN_POSITION - Desired ee_position which is made up of a position element only; orientation is not constrained
        //    3) CMD_PLAN_ORIENTATION - Desired ee_orientation which is made up of an orientation element only; position is not constrained
        //    4) CMD_EXECUTE - Once a plan is available, this command executes the planned trajectory on the gazebo or physical robot
        public const sbyte CMD_PLAN_POSE = 1;
        public const sbyte CMD_PLAN_POSITION = 2;
        public const sbyte CMD_PLAN_ORIENTATION = 3;
        public const sbyte CMD_EXECUTE = 4;
        public sbyte cmd;
        //  desired ee_pose, position, or orientation
        public Geometry.PoseMsg ee_pose;

        public MoveItPlanRequest()
        {
            this.cmd = 0;
            this.ee_pose = new Geometry.PoseMsg();
        }

        public MoveItPlanRequest(sbyte cmd, Geometry.PoseMsg ee_pose)
        {
            this.cmd = cmd;
            this.ee_pose = ee_pose;
        }

        public static MoveItPlanRequest Deserialize(MessageDeserializer deserializer) => new MoveItPlanRequest(deserializer);

        private MoveItPlanRequest(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.cmd);
            this.ee_pose = Geometry.PoseMsg.Deserialize(deserializer);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.cmd);
            serializer.Write(this.ee_pose);
        }

        public override string ToString()
        {
            return "MoveItPlanRequest: " +
            "\ncmd: " + cmd.ToString() +
            "\nee_pose: " + ee_pose.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
